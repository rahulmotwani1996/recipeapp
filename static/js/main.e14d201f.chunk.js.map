{"version":3,"sources":["components/StandardPage/styles.ts","components/SearchPanel/styles.ts","components/SearchPanel/SearchPanel.tsx","components/RecipeFeed/styles.ts","components/Category/styles.ts","components/Category/Category.tsx","components/RecipeListItem/styles.ts","components/RecipeListItem/RecipeListItem.tsx","components/RecipesList/styles.ts","components/RecipesList/RecipesList.tsx","components/RecipeFeed/RecipeFeed.tsx","components/StandardPage/StandardPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","container","backgroundColor","background","height","width","position","backgroundSize","backgroundPositionX","backgroundPositionY","searchPanelContainer","maxWidth","margin","display","alignItems","searchButton","color","borderRadius","underline","borderBottom","SearchPanel","onSearchChange","classes","className","IconButton","onClick","SearchOutlined","TextField","InputProps","fullWidth","onChange","event","target","value","placeholder","padding","maxHeight","recipeListContainer","flexGrow","overflowY","category","flexDirection","justifyContent","Category","categoryName","Typography","variant","header","recipeDetails","image","card","RecipeListItem","recipe","Grid","item","src","alt","name","price","FavoriteBorder","recipeList","RecipesList","recipesList","theme","useTheme","columnCount","useMediaQuery","breakpoints","up","tileList","i","length","push","console","log","map","xs","sm","md","lg","createRecipeList","stateReducer","state","action","payload","newState","getRecipesList","a","fetch","response","json","data","RecipeFeed","React","dispatch","fetchRecipesList","type","StandardPage","App","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e14d201f.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    container: {\n        backgroundColor: '#e3e8e8',\n        background: `url(\"./assets/Images/Illustration2.png\") right top no-repeat, \\\n        url(\"./assets/Images/Illustration1.png\") left bottom no-repeat,\\\n        url(\"./assets/Images/Illustration3.png\") left top no-repeat, \\\n        url(\"./assets/Images/Illustration4.png\") left bottom no-repeat, \\\n        url(\"./assets/Images/Illustration5.png\") left bottom no-repeat`,\n        height: \"100%\",\n        width: \"100%\",\n        position: 'relative',\n        backgroundSize: '30% 40%, 30% 40%, 30% 40%, 20% 30%, 5% 5%',\n        backgroundPositionX: \"105%, -10%, 10%, 108%, 90%\",\n        backgroundPositionY: \"-25%, 115%, 50%, 112%, 80%\",\n    },\n})\n\nexport { useStyles }\n","import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    searchPanelContainer: {\n        width: '80%',\n        maxWidth: '80%',\n        margin: \"auto\",\n        display: 'flex',\n        alignItems: 'center',\n    },\n    searchButton: {\n        backgroundColor: '#ffffff',\n        color: '#000000',\n        borderRadius: '50%',\n        margin: '10px',\n    },\n    underline: {\n        \"&&&:before\": {\n            borderBottom: \"none\"\n        },\n        \"&&:after\": {\n            borderBottom: \"none\"\n        }\n    }\n})\n\nexport { useStyles }\n","import * as React from 'react'\nimport { IconButton, TextField } from '@material-ui/core'\nimport { SearchOutlined } from '@material-ui/icons'\nimport { useStyles } from './styles'\n\ninterface IProps {\n    onSearchChange: (value: string) => void\n}\nfunction SearchPanel({\n    onSearchChange,\n}: IProps) {\n    const classes = useStyles()\n    return <>\n        <div className={classes.searchPanelContainer}>\n            <IconButton\n                className={classes.searchButton}\n                onClick={() => null}\n            >\n                <SearchOutlined />\n            </IconButton>\n            <TextField\n                InputProps= {{ classes: {underline: classes.underline} }}\n                fullWidth={true}\n                onChange={event => onSearchChange(event.target.value)}\n                placeholder={'Search your favourite recipe...'}\n            />\n        </div>\n    </>\n}\n\nexport { SearchPanel }","import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    container: {\n        width: '80%',\n        maxWidth: '80%',\n        margin: \"auto\",\n        padding: '5%',\n        height: '100%',\n        maxHeight: '100%',\n    },\n    recipeListContainer: {\n        flexGrow: 1,\n        overflowY: 'auto',\n    }\n})\n\nexport { useStyles }","import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    category: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'flex-end',\n        justifyContent: 'center',\n    }\n})\nexport { useStyles }","import * as React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { useStyles } from './styles'\n\ninterface IProps  {\n    categoryName: string\n}\nfunction Category({\n    categoryName,\n}: IProps) {\n    const classes = useStyles()\n    return <div className={classes.category}>\n        <Typography color=\"textSecondary\">CATEGORY</Typography>\n        <Typography variant=\"h4\">{categoryName}</Typography>\n    </div>\n}\n\nexport { Category }\n","import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    container: {\n        padding: '5px',\n    },\n    header: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    recipeDetails: {\n        backgroundColor: 'black',\n    },\n    image: {\n        width: '100%',\n        height: 'auto',\n    },\n    card: {\n        display: 'flex',\n        flexDirection: 'column',\n    }\n})\n\nexport { useStyles }\n","import * as React from 'react'\nimport { IRecipe } from 'components/RecipeFeed/RecipeFeed'\nimport { useStyles } from './styles'\nimport { Typography, IconButton, Grid } from '@material-ui/core'\nimport { FavoriteBorder } from '@material-ui/icons'\n\ninterface IProps {\n    recipe: IRecipe\n}\nfunction RecipeListItem({\n    recipe,\n}: IProps) {\n    const classes = useStyles()\n    return <Grid item\n        className={classes.container}\n    ><div className={classes.card}>\n        <div>\n            <img src={recipe.image} className={classes.image} alt=\"recipe\"/>\n        </div>\n        <div className={classes.recipeDetails}>\n            <div className= {classes.header}>\n                <div>\n                    <Typography>{recipe.name}</Typography>\n                    <Typography>{recipe.price}</Typography>\n                </div>\n                <IconButton onClick={() => null}>\n                    <FavoriteBorder/>\n                </IconButton>\n            </div>\n        </div>\n    </div></Grid>\n}\n\nexport { RecipeListItem }","import { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    recipeList: {\n       overflowY: 'auto',\n    }\n})\n\nexport { useStyles }\n","import * as React from 'react'\nimport { IRecipe } from 'components/RecipeFeed/RecipeFeed'\nimport { RecipeListItem } from 'components/RecipeListItem'\nimport { useStyles } from './styles'\nimport { Grid, useTheme, useMediaQuery, Theme } from '@material-ui/core'\n\ninterface IProps {\n    recipesList: IRecipe[]\n}\n\nconst createRecipeList = (recipeList: IRecipe[]) => {\n    return recipeList.map(recipe => {\n        return <RecipeListItem recipe={recipe} />\n    })\n}\n\nfunction RecipesList({\n    recipesList,\n}: IProps) {\n    const classes = useStyles()\n    const theme = useTheme()\n    let columnCount = 1\n    columnCount = useMediaQuery(theme.breakpoints.up(\"sm\")) ? 2 : columnCount\n    columnCount = useMediaQuery(theme.breakpoints.up(\"md\")) ? 3 : columnCount\n    columnCount = useMediaQuery(theme.breakpoints.up(\"lg\")) ? 4 : columnCount\n    const tileList: IRecipe[][] = []\n    for(let i=0;i<recipesList.length;i++) {\n        if(!tileList[i%columnCount])tileList[i%columnCount] = []\n        tileList[i%columnCount].push(recipesList[i])\n    }\n    console.log(tileList)\n    return <Grid container className={classes.recipeList}>\n        {\n            tileList.map(recipeList => {\n                return <Grid item xs={12} sm={6} md={4} lg={3}>\n                    {createRecipeList(recipeList)}\n                </Grid>\n            })\n        }\n    </Grid>\n}\n\nexport { RecipesList }","import * as React from 'react'\nimport { Grid } from '@material-ui/core'\nimport { SearchPanel } from 'components/SearchPanel'\nimport { useStyles } from './styles'\nimport { Category } from 'components/Category'\nimport { RecipesList } from 'components/RecipesList'\n\nexport interface IRecipe {\n    id: number\n    name: string\n    image: string\n    category: string\n    label: string\n    price: string\n    description: string\n}\ninterface IAction {\n    payload: object,\n    type: string\n}\ninterface IState {\n    recipesList: IRecipe[]\n}\nfunction stateReducer(state: IState, action: IAction){\n    const { payload } = action\n    const newState = {\n        ...state,\n        ...payload,\n    }\n    const updatedState = {}\n    return {\n        ...newState,\n        ...updatedState\n    }\n}\n\nconst getInitialState = (): IState => {\n    return {\n        recipesList: [],\n    }\n}\nconst getRecipesList = async  () => {\n    const response = await fetch('http://starlord.hackerearth.com/recipe')\n    const data = await response.json()\n    return data\n}\nfunction RecipeFeed() {\n    const classes = useStyles()\n    const [state, dispatch] = React.useReducer(stateReducer, getInitialState())\n    const {\n        recipesList\n    } = state\n    const fetchRecipesList = async () => {\n        const recipesList = await getRecipesList()\n        console.log(recipesList)\n        dispatch({\n            payload: {\n                recipesList,\n            },\n            type:\"list\"\n        })\n    }\n    React.useEffect(() => {\n        fetchRecipesList()\n    }, [])\n    return <>\n        <Grid container className={classes.container}>\n            <Grid item xs={12}>\n                <SearchPanel onSearchChange={() => null} />\n            </Grid>\n            <Grid item xs={12}>\n                <Category categoryName={'Pizza & Noodles'} />\n            </Grid>\n            <Grid item xs={12} className={classes.recipeListContainer}>\n                <RecipesList recipesList={recipesList}/>\n            </Grid>\n        </Grid>\n    </>\n\n}\nexport { RecipeFeed }","import * as React from 'react'\nimport { useStyles } from './styles'\nimport { RecipeFeed } from 'components/RecipeFeed'\n\nfunction StandardPage() {\n    const classes = useStyles()\n    return <div className={classes.container}>\n        <RecipeFeed />\n    </div>\n}\n\nexport { StandardPage }","import React from 'react';\nimport { StandardPage } from './components/StandardPage';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{height: \"100%\", width: \"100%\"}}>\n      <StandardPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}